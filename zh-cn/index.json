[{"categories":["转录组"],"content":"介绍 本篇记录转录组有参分析主要基于STAR(比对)+featureCount(定量)。 ","date":"2021-12-05","objectID":"/zh-cn/mrna_ref2/:1:0","tags":["RNA-seq","STAR","featureCount"],"title":"转录组有参分析（二)","uri":"/zh-cn/mrna_ref2/"},{"categories":["转录组"],"content":"1st, 前期准备 # 部署工作环境 mkdir -p ${HOME}/project/mRNA/{bin,data/{genes,genome,index,samples},output} ##bin，存放分析脚本 ##data/genes，存放基因组gff ##data/genome,存放基因组fasta ##data/index，存放基因组索引文件index ##data/samples，存放样品数据reads fastq # 准备数据 ln -s /path-to-reference-genome/ref.fa ${HOME}/project/mRNA/data/genome/ ln -s /path-to-reference-genome/ref.gff ${HOME}/project/mRNA/data/genes/ ##/path-to-reference-genome/为基因组存放路径 ##ref.fa为基因组fasta ##ref.gff3为基因组结构注释文件gff3 for i in `find /path-to-samples-fastq/ -type f -name \"*.fq.gz\"`; do ln -s ${i} ${HOME}/project/mRNA/data/samples/; done ##/path-to-samples-fastq/为样品fastq存放路径 ","date":"2021-12-05","objectID":"/zh-cn/mrna_ref2/:2:0","tags":["RNA-seq","STAR","featureCount"],"title":"转录组有参分析（二)","uri":"/zh-cn/mrna_ref2/"},{"categories":["转录组"],"content":"2nd, 第一次比对 #!/bin/bash -x # 环境参数配置 NUMCPUS=28 THREADS=`expr ${NUMCPUS} \\* 2` BASEDIR=\"${HOME}/project/mRNA\" FASTQLOC=\"${BASEDIR}/data/samples\" GTFFILE=\"${BASEDIR}/data/genes/ref.gtf\" GENOMEFA=\"${BASEDIR}/data/genome/ref.fa\" GENOMEIDXDIR=\"$BASEDIR/data/index\" GENOMEIDX_TPDIR=\"$BASEDIR/data/index_twopass\" WRKDIR=\"${BASEDIR}/output\" INDEX_TP=`ls ${WORKDIR}/*SJ.out.tab` LOGFILE=${WRKDIR}/star_align.log ##NUMCPUS 使用CPU数，根据计算资源调整； ##THREADS，线程数为CPU数x2 ##BASEDIR，proj基本目录 ##FASTQLOC，reads fastq路径 ##GTFFILE，基因组ref的结构注释文件gtf，可从gff文件转换 ##GENOMEFA，基因组ref的fasta ##GENOMEIDXDIR，基因组ref的index路径 ##GENOMEIDX_TPDIR，基因组ref的index路径 ##WRKDIR，proj输出目录 ##INDEX_TP，基因组two pass的index路径 ##LOGFILE，日志文件 set -e #set -x SCRIPTARGS=\"$@\" stime=`date +\"%Y-%m-%d %H:%M:%S\"` # 将基因组注释文件gff3转为gtf cd ${BASEDIR}/data/genes/ gffread ref.gff -T -o ${GTFFILE} # 建立基因组index cd $WRKDIR first_index(){ echo [$stime] \"#\u003e START: \" $0 $SCRIPTARGS echo [$stime] \" * Generating genome indexes (STAR)\" STAR --runThreadN ${NUMCPUS} \\ --runMode genomeGenerate \\ --genomeDir ${GENOMEIDX} \\ --genomeFastaFiles ${GENOMEFA} \\ --sjdbGTFfile ${GTFFILE} \\ --sjdbOverhang 149 ##runThreadN， ##runMode， ##genomeDir， ##genomeFastaFiles， ##sjdbGTFfile， ##sjdbOverhang， echo [$stime] \"#\u003e Genome Index DONE.\" } first_index 2\u003e\u00261 | tee ${LOGFILE} # 提取reads信息 reads1=(${FASTQLOC}/*_1.*) reads1=(\"${reads1[@]##*/}\") reads2=(\"${reads1[@]/_1./_2.}\") ##样品reads pair-end fastq必须是以\"_1.*\"或\"_2.*\"结尾，如\"gill01_1.fastq.gz\",\"gill01_2.fastq.gz\" # 开始比对 cd ${WRKDIR} first_align() { for ((i=0; i\u003c=${#reads1[@]}-1; i++ )); do sample=\"${reads1[$i]%%.*}\" sample=\"${sample%_*}\" echo \"[$stime] Processing sample: $sample\" echo [$stime] \" * Running mapping jobs (STAR)\" STAR --runThreadN ${NUMCPUS} \\ --genomeDir ${GENOMEIDX} \\ --readFilesIn ${FASTQLOC}/${reads1[$i]} ${FASTQLOC}/${reads2[$i]} \\ --readFilesCommand zcat \\ --outSAMtype BAM Unsorted \\ --outFileNamePrefix ${sample} echo [$stime] \" * $sampleFinished \" done echo [$stime]\" 1st mapping jobs (STAR) Finished.\" } first_align 2\u003e\u00261 | tee $LOGFILE ","date":"2021-12-05","objectID":"/zh-cn/mrna_ref2/:3:0","tags":["RNA-seq","STAR","featureCount"],"title":"转录组有参分析（二)","uri":"/zh-cn/mrna_ref2/"},{"categories":["转录组"],"content":"3rd, 第二次比对 #!/bin/bash -x # 环境参数配置 NUMCPUS=28 THREADS=`expr ${NUMCPUS} \\* 2` BASEDIR=\"${HOME}/project/mRNA\" FASTQLOC=\"${BASEDIR}/data/samples\" GTFFILE=\"${BASEDIR}/data/genes/ref.gtf\" GENOMEFA=\"${BASEDIR}/data/genome/ref.fa\" GENOMEIDXDIR=\"$BASEDIR/data/index\" GENOMEIDX_TPDIR=\"$BASEDIR/data/index_twopass\" WRKDIR=\"${BASEDIR}/output\" INDEX_TP=`ls ${WORKDIR}/*SJ.out.tab` LOGFILE=${WRKDIR}/star_align.log stime=`date +\"%Y-%m-%d %H:%M:%S\"` two-pass_index(){ echo $stime] \"#\u003e START: \" ${0} ${SCRIPTARGS} echo [$stime] \" * Generating 2-pass genome indexes (STAR)\" STAR --runThreadN ${NUMCPUS} \\ --runMode genomeGenerate \\ --genomeDir ${GENOMEIDX_TP} \\ --genomeFastaFiles ${GENOMEFA} \\ --sjdbGTFfile ${GTFFILE} \\ --sjdbFileChrStartEnd ${INDEX2PASS} \\ --sjdbOverhang 149 echo [$stime] \"#\u003e 2-pass index DONE.\" } two-pass_index 2\u003e\u00261 | tee $LOGFILE two-pass_align() { for ((i=0; i\u003c=${#reads1[@]}-1; i++ )); do sample=\"${reads1[$i]%%.*}\" sample=\"${sample%_*}\" echo \"[$stime] Processing sample: $sample\" echo [$stime] \" * Running mapping jobs (STAR)\" STAR --runThreadN ${NUMCPUS} \\ --genomeDir ${GENOMEIDX_TP} \\ --readFilesIn ${FASTQLOC}/${reads1[$i]} ${FASTQLOC}/${reads2[$i]} \\ --readFilesCommand zcat \\ --outSAMtype BAM Unsorted \\ --outFileNamePrefix ./align_2pass/${sample}_2-pass \\ echo [$stime] \" * $sampleFinished \" done echo [$stime] \" 2-pass mode mapping jobs (STAR) Finished.\" } two-pass_align 2\u003e\u00261 | tee $LOGFILE ","date":"2021-12-05","objectID":"/zh-cn/mrna_ref2/:4:0","tags":["RNA-seq","STAR","featureCount"],"title":"转录组有参分析（二)","uri":"/zh-cn/mrna_ref2/"},{"categories":["转录组"],"content":"4th, 转录本定量 #!/bin/bash -x # 环境参数配置 NUMCPUS=28 THREADS=`expr ${NUMCPUS} \\* 2` BASEDIR=\"${HOME}/project/mRNA\" FASTQLOC=\"${BASEDIR}/data/samples\" GTFFILE=\"${BASEDIR}/data/genes/ref.gtf\" GENOMEFA=\"${BASEDIR}/data/genome/ref.fa\" GENOMEIDXDIR=\"$BASEDIR/data/index\" GENOMEIDX_TPDIR=\"$BASEDIR/data/index_twopass\" WRKDIR=\"${BASEDIR}/output\" INDEX_TP=`ls ${WORKDIR}/*SJ.out.tab` LOGFILE=${WRKDIR}/star_align.log stime=`date +\"%Y-%m-%d %H:%M:%S\"` cd $GENOMEIDX_TPDIR echo $stime] \"#\u003e START: \" ${0} ${SCRIPTARGS} echo [$stime] \" * Generating 2-pass genome indexes (STAR)\" featureCounts -t exon -g transcript_id -T 50 -p *bam -a $GTFFILE -o STARalign_readcounts grep -v \"#\" STARalign_readcounts|sed 's/\"//g'|sed 's/_2-passAligned.out.bam//g'|cut -f1,6- \u003eSTARalign_readcounts.txt echo [$stime] \" Finished \" 后续差异基因分析和功能分析，参考RNA-seq analysis (有参分析 一) ","date":"2021-12-05","objectID":"/zh-cn/mrna_ref2/:5:0","tags":["RNA-seq","STAR","featureCount"],"title":"转录组有参分析（二)","uri":"/zh-cn/mrna_ref2/"},{"categories":["转录组"],"content":"Reference ","date":"2021-12-05","objectID":"/zh-cn/mrna_ref2/:6:0","tags":["RNA-seq","STAR","featureCount"],"title":"转录组有参分析（二)","uri":"/zh-cn/mrna_ref2/"},{"categories":["转录组"],"content":"介绍 常规转录组分析：数据指控（QC）-\u003e 比对（Alignment）-\u003e 定量（Quantity）-\u003e 差异基因分析（DEG）-\u003e 功能富集（Enrichment） 本篇记录的转录组有参分析流程主要包括： HISAT2（比对） Stringtie（定量） DESeq2（差异分析） clusterProfiler（富集分析） ","date":"2020-05-08","objectID":"/zh-cn/mrna_ref1/:1:0","tags":["RNA-seq","HISAT2","DESeq2","clusterProfiler"],"title":"转录组有参分析（一)","uri":"/zh-cn/mrna_ref1/"},{"categories":["转录组"],"content":"1st, 前期准备 # 部署工作环境 mkdir -p ${HOME}/project/mRNA/{bin,data/{genes,genome,index,samples},output/{hisat2_dir,stringtie_dir,tmp}} ##bin，存放分析脚本 ##data/genes，存放基因组gff ##data/genome,存放基因组fasta ##data/index，存放基因组索引文件index ##data/samples，存放样品数据reads fastq ##output/hisat2_dir,存放比对结果，如bam ##output/stringtie_dir，存放定量结果等 # 准备数据 ln -s /path-to-reference-genome/ref.fa ${HOME}/project/mRNA/data/genome/ ln -s /path-to-reference-genome/ref.gff ${HOME}/project/mRNA/data/genes/ ##/path-to-reference-genome/为基因组存放路径 ##ref.fa为基因组fasta ##ref.gff3为基因组结构注释文件gff3 for i in `find /path-to-samples-fastq/ -type f -name \"*.fq.gz\"`; do ln -s ${i} ${HOME}/project/mRNA/data/samples/; done ##/path-to-samples-fastq/为样品fastq存放路径 ","date":"2020-05-08","objectID":"/zh-cn/mrna_ref1/:2:0","tags":["RNA-seq","HISAT2","DESeq2","clusterProfiler"],"title":"转录组有参分析（一)","uri":"/zh-cn/mrna_ref1/"},{"categories":["转录组"],"content":"2nd, 比对 #!/bin/bash -x # 环境参数配置 NUMCPUS=28 THREADS=`expr ${NUMCPUS} \\* 2` BASEDIR=\"${HOME}/project/mRNA\" FASTQLOC=\"${BASEDIR}/data/samples\" GENOMEIDX=\"${BASEDIR}/data/index/ref_tran\" GTFFILE=\"${BASEDIR}/data/genes/ref.gtf\" GENOMEFA=\"${BASEDIR}/data/genome/ref.fa\" WRKDIR=\"${BASEDIR}/output\" ALIGNLOC=\"${WRKDIR}/hisat2_dir\" STRINGTIELOC=\"${WRKDIR}/stringtie_dir\" TEMPLOC=\"${WRKDIR}/tmp\" ##NUMCPUS 使用CPU数，根据计算资源调整； ##THREADS，线程数为CPU数x2 ##BASEDIR，proj基本目录 ##FASTQLOC，reads fastq路径 ##GENOMEIDX，基因组ref的index文件 ##GTFFILE，基因组ref的结构注释文件gtf，可从gff文件转换 ##GENOMEFA，基因组ref的fasta ##WRKDIR，proj输出目录 ##ALIGNLOC，比对结果目录 ##STRINGTIELOC，定量等结果目录 ##TEMPLOC，临时文件 # 将基因组注释文件gff3转为gtf cd ${BASEDIR}/data/genes/ gffread ref.gff -T -o ${GTFFILE} # 提取剪切位点和外显子信息 cd ${BASEDIR}/data/index python2 /path-to-hisat_install_dir/extract_splice_sites.py ${GTFFILE} \u003e ref.ss python2 /path-to-hisat_install_dir/extract_exons.py ${GTFFILE} \u003e ref.exon ##/path-to-hisat_install_dir/为HISAT2安装路径 # 建立基因组index hisat2-build -p ${THREADS} --ss ref.ss --exon ref.exon ${GENOMEFA} ref_tran # 提取reads信息 reads1=(${FASTQLOC}/*_1.*) reads1=(\"${reads1[@]##*/}\") reads2=(\"${reads1[@]/_1./_2.}\") ###样品reads pair-end fastq必须是以\"_1.*\"或\"_2.*\"结尾，如\"gill01_1.fastq.gz\",\"gill01_2.fastq.gz\" # 开始比对 cd ${WRKDIR} stime=`date +\"%Y-%m-%d %H:%M:%S\"` echo \"[$stime] #\u003e START: HISAT2 Alignment\" for ((i=0; i\u003c=${#reads1[@]}-1; i++ )); do sample=\"${reads1[$i]%%.*}\" sample=\"${sample%_*}\" ##根据reads1获得sample echo \"[$stime] Processing sample: $sample\" echo [$stime] \" * Alignment of reads to genome (HISAT2)\" hisat2 -p $NUMCPUS \\ --dta \\ -x ${GENOMEIDX} \\ -1 ${FASTQLOC}/${reads1[$i]} \\ -2 ${FASTQLOC}/${reads2[$i]} \\ -S ${TEMPLOC}/${sample}.sam 2\u003e${ALIGNLOC}/${sample}.alnstats ##-p，设置线程数 ##--x，指定基因组index ##--1，输入reads1.fastq ##--2，输入reads2.fastq ##--S，指定sam echo [$stime] \" * Alignments conversion (SAMTools)\" samtools view -S -b ${TEMPLOC}/${sample}.sam | \\ samtools sort -@ $NUMCPUS -o ${ALIGNLOC}/${sample}.bam - rm ${TEMPLOC}/${sample}.sam echo [$stime] \" * Assemble transcripts (StringTie)\" stringtie -p $NUMCPUS \\ -G ${GTFFILE} \\ -o ${ALIGNLOC}/${sample}.gtf \\ -l ${sample} ${ALIGNLOC}/${sample}.bam ##-p， ##-G， ##-o， ##-l， done echo [$stime] \"#\u003e Step Two : Alignment Finished!\" ","date":"2020-05-08","objectID":"/zh-cn/mrna_ref1/:3:0","tags":["RNA-seq","HISAT2","DESeq2","clusterProfiler"],"title":"转录组有参分析（一)","uri":"/zh-cn/mrna_ref1/"},{"categories":["转录组"],"content":"3rd, 转录本定量 #!/bin/bash -x # 环境参数配置 NUMCPUS=28 THREADS=`expr ${NUMCPUS} \\* 2` BASEDIR=\"${HOME}/project/mRNA\" FASTQLOC=\"${BASEDIR}/data/samples\" GENOMEIDX=\"${BASEDIR}/data/index/ref_tran\" GTFFILE=\"${BASEDIR}/data/genes/ref.gtf\" GENOMEFA=\"${BASEDIR}/data/genome/ref.fa\" WRKDIR=\"${BASEDIR}/output\" ALIGNLOC=\"${WRKDIR}/hisat2_dir\" STRINGTIELOC=\"${WRKDIR}/stringtie_dir\" TEMPLOC=\"${WRKDIR}/tmp\" stime=`date +\"%Y-%m-%d %H:%M:%S\"` echo [$stime] \"#\u003e START: STRINGTIE Estimation\" # 转录本重构 echo [$stime] \"#\u003e Merge all transcripts (StringTie)\" ls -1 ${ALIGNLOC}/*.gtf \u003e ${ALIGNLOC}/mergelist.txt stringtie --merge \\ -p $NUMCPUS \\ -G ${GTFFILE} \\ -o ${STRINGTIELOC}/stringtie_merged.gtf ${ALIGNLOC}/mergelist.txt ##--merge，Transcript merge mode,StringTie takes as input a list of GTF/GFF files and merges/assembles these transcripts into a non-redundant set of transcripts. ##-G，基因组ref的gtf文件,StringTie will assemble the transfrags from the input GTF files with the reference transcripts. ##-o，指定输出样品gtf文件 # 转录本定量 echo [$stime] \"#\u003e Estimate abundance for each sample (StringTie)\" for ((i=0; i\u003c=${#reads1[@]}-1; i++ )); do sample=\"${reads1[$i]%%.*}\" sample=\"${sample%_*}\" if [ ! -d ${STRINGTIELOC}/${sample} ]; then mkdir -p ${STRINGTIELOC}/${sample} fi stringtie -e -B \\ -p $NUMCPUS \\ -G ${GTFFILE} \\ -o ${STRINGTIELOC}/${sample}/${sample}.gtf ${ALIGNLOC}/${sample}.bam ##-e，expression estimation mode; this limits the processing of read alignments to estimating the coverage of the transcripts given with the -G option ##-B，enables the output of Ballgown input table files (*.ctab) containing coverage data for the reference transcripts given with the -G option. done # 提取read count矩阵 python2 /public/tools/rna_seq/stringtie-1.3.4/prepDE.py -l 150 echo [$stime] \"#\u003e Step Three: Estimation Finished!\" ","date":"2020-05-08","objectID":"/zh-cn/mrna_ref1/:4:0","tags":["RNA-seq","HISAT2","DESeq2","clusterProfiler"],"title":"转录组有参分析（一)","uri":"/zh-cn/mrna_ref1/"},{"categories":["转录组"],"content":"4th, 差异基因分析 library(\"DESeq2\") path=getwd() countData \u003c- as.matrix(read.csv(paste(path,\"/transcript_count_matrix.csv\",sep=\"\"), row.names=\"transcript_id\")) colData \u003c- read.csv(paste(path,\"/phenodata.csv\",sep=\"\"), sep=\",\", row.names=1) all(rownames(colData) %in% colnames(countData)) countData \u003c- countData[, rownames(colData)] all(rownames(colData) == colnames(countData)) dds \u003c- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group) dds \u003c- DESeq(dds) # filter count\u003c10 dds_filter \u003c- dds[ rowSums(counts(dds)) \u003e 10, ] dds \u003c- DESeq(dds_filter) # plot PCA rld \u003c- rlog(dds) pdf(\"pca_t.pdf\") plotPCA(rld, intgroup=\"group\") dev.off() # take group H_Red and H_YX for examples res\u003c- results(dds,contrast=c(\"group\",\"H_Red\",\"C_Red\"), alpha=0.05) resOrdered \u003c- res[order(res$padj), ] diff_gene_deseq2 \u003c-subset(resOrdered,padj \u003c 0.05 \u0026 (log2FoldChange \u003e 1 | log2FoldChange \u003c -1)) diff_gene_deseq2 \u003c- merge(as.data.frame(diff_gene_deseq2), as.data.frame(counts(dds,normalize=TRUE)), by=\"row.names\",sort=FALSE) write.csv(diff_gene_deseq2, file=\"./Red_HvC.sig.csv\", row.names = F) EOF ","date":"2020-05-08","objectID":"/zh-cn/mrna_ref1/:5:0","tags":["RNA-seq","HISAT2","DESeq2","clusterProfiler"],"title":"转录组有参分析（一)","uri":"/zh-cn/mrna_ref1/"},{"categories":["转录组"],"content":"5th, 功能富集 cat \u003c\u003cEOF \u003e\u003eenrichment.R sig_gene \u003c- read.csv(\"./Red_HvC.sig.csv\",header = T) universe \u003c- read.delim(\"/path-to-reference-genome/ref_universe.txt\",sep=\"\\t\",header=FALSE,stringsAsFactors = F) go2gene \u003c- read.delim(\"/path-to-reference-genome/ref_go2gene.txt\", sep=\"\\t\",header = FALSE,stringsAsFactors = F) go2name \u003c- read.delim(\"/path-to-reference-genome/ref_go2term.txt\", sep=\"\\t\",header = FALSE,stringsAsFactors = F) map2gene \u003c- read.delim(\"/path-to-reference-genome/ref_map2gene.txt\", sep=\"\\t\",header = FALSE,stringsAsFactors = F) map2name \u003c- read.delim(\"/path-to-reference-genome/ref_map2term.txt\", sep=\"\\t\",header = FALSE,stringsAsFactors = F) library(\"clusterProfiler\") # ge enrichment go=enricher(gene = sig_gene[,1], universe = universe[,1], TERM2GENE= go2gene, TERM2NAME = go2name[,1:2]) pdf(\"go_enrich.pdf\") barplot(go,showcatergory=20) #View(data.frame(go)) dev.off() # kegg enrichment kegg=enricher(gene = sig_gene[,1], universe = universe[,1], TERM2GENE= map2gene, TERM2NAME = map2name) pdf(\"kegg_enrich.pdf\") barplot(kegg,showcatergory=20) dev.off() EOF ","date":"2020-05-08","objectID":"/zh-cn/mrna_ref1/:6:0","tags":["RNA-seq","HISAT2","DESeq2","clusterProfiler"],"title":"转录组有参分析（一)","uri":"/zh-cn/mrna_ref1/"},{"categories":["转录组"],"content":"Reference https://www.nature.com/articles/nprot.2016.095 http://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html https://guangchuangyu.github.io/software/clusterProfiler/ ","date":"2020-05-08","objectID":"/zh-cn/mrna_ref1/:7:0","tags":["RNA-seq","HISAT2","DESeq2","clusterProfiler"],"title":"转录组有参分析（一)","uri":"/zh-cn/mrna_ref1/"},{"categories":["Linux"],"content":"生信学习里装软件是一件很头疼又富有成就感的事，且整理一下一些心得。 ","date":"2020-05-03","objectID":"/zh-cn/install_intro/:0:0","tags":["Linux","R","python"],"title":"关于生信软件的安装","uri":"/zh-cn/install_intro/"},{"categories":["Linux"],"content":"环境部署 开始之前，建议一开始先把工作目录都规划好(养成好习惯)。 # 部署工作目录 mkdir -p {bin,download,local/{app,include,lib},project,perl5} tree --charset ASCII -L 2 # 如下结构 . |-- bin |-- download |-- local | |-- app | |-- include | `-- lib |-- perl5 |-- project ##bin 直接添加到PATH路径中，后续安装完软件，直接```ln -s \u003cpath-to-soft\u003e $HOME/bin/``` ##down 用来下载软件和数据常用,下载命令如**wget,axel**等 ##local 用来装软件和各种库，app安装软件 ##pel5 用来装perl module，后面会介绍 ##project 用来管理和分析项目 建好文件夹后就要在开始进行环境变量设置，即在**$HOME/.bashrc**中添加如下内容，添加后记得source $HOME/.bashrc # Local bin,app export LOCAL_BIN=$HOME/bin export LOCAL_HOME=$HOME/local export LOCAL_APP=$LOCAL_HOME/app export PATH=$LOCAL_BIN:$PATH # Local lib,include ## 动态链接库的路径 export LD_LIBRARY_PATH=$LOCAL_HOME/lib:$LD_LIBRARY_PATH export LD_RUN_PATH=$LOCAL_HOME/lib:$LD_RUN_PATH ## 静态链接库的路径 export LIBRARY_PATH=$LOCAL_HOME/lib:$LIBRARY_PATH ## gcc头文件的路径 export C_INCLUDE_PATH=$LOCAL_HOME/include ## g++头文件的路径 export CPLUS_INCLUDE_PATH=$LOCAL_HOME/include:$CPLUS_INCLUDE_PATH # Local perl lib LOCAL_PERL_EDITION=${HOME}/perl5 export PERL5LIB=$LOCAL_PERL_EDITION/lib export PATH=$LOCAL_PERL_EDITION/bin:$PATH 以上部署时N年前参考shenwei博客等，感兴趣可以去瞅瞅。 ","date":"2020-05-03","objectID":"/zh-cn/install_intro/:1:0","tags":["Linux","R","python"],"title":"关于生信软件的安装","uri":"/zh-cn/install_intro/"},{"categories":["Linux"],"content":"软件安装 1st: 最希望的是软件开发者都编译好了，这样我们直接下载解压后就能用那种的，比如blast+等。 2nd: 源代码(source code)安装，解压后，一定要好好看README.txt或者INSTALL，一般来说就是三部曲。 # 1.检测环境依赖库 ./configure --prefix=/path-to-install/ ## configure中通过--prefix=/path-to-install/来指定安装路径 # 2.编译软件 make -j4 # 3.安装软件 make install Q1:configure过程往往都是各种error或者not found等错误 A1:这样需要通过错误提示去搜索，可能缺某个lib，一般解决方法就是下载lib source code安装，然后把lib加入环境的动态或者静态库路径中。 Q2:有的程序没有configure直接make，那怎么指定安装路径呢？ A2:这样可以通过make install DESTDIR=/path-to-install/来指定安装路径 3rd: 这时候还有conda，因为系统默认是python2，所以下个python2版本的conda # 创建环境，如env_test conda create -n env_test # 激活环境 conda activate env_test # 安装软件 conda install python=3.6 ##conda install \u003c软件名\u003e=\u003cversion\u003e 至于源代码安装和conda安装的优先级，我个人倾向源代码，虽然要经常debug。 conda有以下两点， 依赖镜像地址，一旦地址失效，就只能离线安装； 环境设置不好容易混乱。 总之，仁者见仁，能用就行。 接下来，以实验室集群的环境进行案例演示 ","date":"2020-05-03","objectID":"/zh-cn/install_intro/:2:0","tags":["Linux","R","python"],"title":"关于生信软件的安装","uri":"/zh-cn/install_intro/"},{"categories":["Linux"],"content":"案例一：R语言安装 如果你的工作目录部署和环境配置是和我上面介绍的一样的话，那么，这下面R-3.6.3的安装代码直接复制到我们的集群上运行即可。 # 建立软件目录 mkdir -p $LOCAL_APP/R ## 经常要装多个R版本，所以索性建个R文件夹，子文件夹再分版本 # 下载软件 wget -c $HOME/download https://mirrors.e-ducation.cn/CRAN/src/base/R-3/R-3.6.3.tar.gz # 解压软件 tar -xvzf $HOME/download/R-3.6.3.tar.gz -C $LOCAL_APP/R # 指定GCC环境，集群公共软件里已经有安装gcc-7.2,所以直接设置添加到.bashrc中 cat \u003c\u003cEOF \u003e\u003e$HOME/.bashrc # gcc LOCAL_GCC_PATH=/public/tools/devtools/gcc-7.2.0/ export PATH=\\$LOCAL_GCC_PATH/bin:\\$PATH export C_INCLUDE_PATH=\\$LOCAL_GCC_PATH/lib:\\$C_INCLUDE_PATH export CPLUS_INCLUDE_PATH=\\$LOCAL_GCC_PATH/lib64:\\$CPLUS_INCLUDE_PATH export CFLAGS=-I\\$LOCAL_GCC_PATH/include:\\$CFLAGS export LDFLAGS=-L\\$LOCAL_GCC_PATH/lib64:-L\\$LOCAL_GCC_PATH/lib:\\$LDFLAGS export LD_LIBRARY_PATH=\\$LOCAL_GCC_PATH/lib64:\\$LD_LIBRARY_PATH export LD_RUN_PATH=\\$LOCAL_GCC_PATH/lib64:\\$LD_RUN_PATH export LIBRARY_PATH=\\$LOCAL_GCC_PATH/lib64:\\$LIBRARY_PATH EOF source $HOME/.bashrc # 开始安装，这里我默认安装在R语言安装目录，所以用--prefix=$PWD,大家也可以修改--prefix=/path-to-install-R/ cd $LOCAL_APP/R/R-3.6.3 ./configure --prefix=$PWD --enable-R-shlib --with-blas --with-lapack --with-x --with-tcltk --with-tcl-config=/usr/lib64/tcl8.5/tclConfig.sh --with-tk-config=/usr/lib64/tkConfig.sh make -j4 \u0026\u0026 make install # 添加到路径 ln -s $PWD/bin/R $LOCAL_BIN/R ln -s $PWD/bin/Rscript $LOCAL_BIN/Rscript # 配置R语言环境,即修改$HOME/.Rprofile文件 cat \u003c\u003cEOF \u003e$HOME/.Rprofile local({ r = getOption(\"repos\") r[\"CRAN\"] = \"http://mirrors.ustc.edu.cn/CRAN/\" options(repos = r) }) options(BioC_mirror=\"https://mirrors.tuna.tsinghua.edu.cn/bioconductor\") EOF # END ","date":"2020-05-03","objectID":"/zh-cn/install_intro/:2:1","tags":["Linux","R","python"],"title":"关于生信软件的安装","uri":"/zh-cn/install_intro/"},{"categories":["Linux"],"content":"案例二：Python安装 Q1:首先，要装python2还是python3？ A1:一般是后者，因为集群已经自带python 2.7.15，且python3是大趋势。 Q2:其次，虽然系统自带python2，但普通用户没有权限将module安装到系统Python库，怎么破？ A2:两种方法，一种就是通过安装命令参数和环境配置解决，一种源代码安装（案例装的python3）。 通过命令参数和环境变量设置安装私有包 # 安装私有包 ##通过pip安装，简单粗暴 ##pip install --user \u003cpackagename\u003e ##下载module source code然后执行以下命令 ##python3 setup.py install --user # 举例装个matplotlib，这里-i加入清华镜像，可以提速 pip install --user -i https://pypi.tuna.tsinghua.edu.cn/simple matplotlib # 安装好的私有包就在$HOME/.local/lib/python2.7/site-packages,添加到环境变量即可 cat \u003c\u003cEOF \u003e\u003e$HOME/.bashrc # python2.7 module path export PYTHONPATH=\\$HOME/.local/lib/python2.7/site-packages:\\$PYTHONPATH EOF source $HOME/.bashrc 源代码安装python3 如果系统连python2安装缺少某些库，那一样只能源代码安装python，这里以安装python3.6为案例。 # 下载软件安装包 axel -a -o $HOME/download https://www.python.org/ftp/python/3.6.10/Python-3.6.10.tgz # 解压压缩包 tar -xvzf $HOME/download/Python-3.6.10.tgz -C $LOCAL_APP/ # 安装 ./configure --prefix=$PWD --enable-shared --with-ensurepip=install --with-tcltk-includes=\"-I/usr/include/\" --with-tcltk-libs=\"-L/usr/lib64/\" make -j4 \u0026\u0026 make install cat \u003c\u003cEOF \u003e\u003e$HOME/.bashrc # local python3 path export LOCAL_PYTHON=\\$LOCAL_APP/Python-3.6.10 export PYTHONPATH=\\$LOCAL_PYTHON/lib/python3.6/site-packages:$LOCAL_PYTHON/lib:$PYTHONPATH export PATH=\\$LOCAL_PYTHON/bin:\\$PATH export LD_LIBRARY_PATH=\\$PYTHONPATH/lib:\\$LD_LIBRARY_PATH export LD_RUN_PATH=\\$LOCAL_GCC_PATH/lib64:\\$LD_RUN_PATH EOF source $HOME/.bashrc PS：python2和python3是相互不兼容的额，所以当装了多个python，在切换版本时，一定要确认$PYTHONPATH是否也对应切换了。 ","date":"2020-05-03","objectID":"/zh-cn/install_intro/:2:2","tags":["Linux","R","python"],"title":"关于生信软件的安装","uri":"/zh-cn/install_intro/"},{"categories":["Linux"],"content":"案例三：Perl module安装 既然python可以利用系统python，perl当然也可以。 但不建议自己安装perl，过程比较麻烦，还要注意安装perl版本与系统版本是一致的，不然有的软件安装默认调用系统perl，一旦模块对不同版本不兼容，就会各种报错，相当郁闷。 # 下载cpanm curl -L http://cpanmin.us/ -o $LOCAL_BIN/cpanm \u0026\u0026 chmod +x $LOCAL_BIN/cpanm ##cpanm是安装Perl模块的最方便的方法，自动下载安装依赖包。 ##cpanm其实是一个可执行文件而已，将它下载到bin目录，然后添加执行权限就可以了。 # 设置环境变量 cat \u003c\u003cEOF \u003e\u003e$HOME/.bashrc # local perl lib path alias cpanm='cpanm --prompt --mirror http://mirrors.ustc.edu.cn/CPAN/ -l \\$HOME/perl5' export PERL5LIB=\\$HOME/perl5/lib/perl5:\\$PERL5LIB EOF source $HOME/.bashrc # 安装模块命令cpanm \u003cmodule-name\u003e，这里举例安装MongoDB cpanm MongoDB # 如果要卸载模块则要借助App::pmuninstal（也是一个模块） cpanm App::pmuninstal # 卸载模块命令pm-uninstal \u003cmodule-name\u003e pm-uninstal MongoDB ","date":"2020-05-03","objectID":"/zh-cn/install_intro/:2:3","tags":["Linux","R","python"],"title":"关于生信软件的安装","uri":"/zh-cn/install_intro/"},{"categories":["Linux"],"content":"参考 http://blog.shenwei.me/about/ http://www.ttlsa.com/perl/use-cpanm-to-install-perl-modules/ ","date":"2020-05-03","objectID":"/zh-cn/install_intro/:3:0","tags":["Linux","R","python"],"title":"关于生信软件的安装","uri":"/zh-cn/install_intro/"},{"categories":["Linux"],"content":"END ","date":"2020-05-03","objectID":"/zh-cn/install_intro/:4:0","tags":["Linux","R","python"],"title":"关于生信软件的安装","uri":"/zh-cn/install_intro/"},{"categories":null,"content":"记录和整理这些年所学的知识。 ","date":"2019-07-28","objectID":"/zh-cn/about/:0:0","tags":null,"title":"关于这个博客","uri":"/zh-cn/about/"}]